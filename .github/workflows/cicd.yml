name: cicd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  setup:
    name: setup
    runs-on: ubuntu-latest
    timeout-minutes: 1
    strategy:
      matrix:
        go: [stable]
      fail-fast: true
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true

  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 1
    strategy:
      matrix:
        go: [stable]
      fail-fast: true
    needs: setup
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true
      - name: run go generate
        run: go generate ./... && git diff --exit-code
      - name: run go build
        run: go build -o /dev/null ./...

  clean:
    name: clean
    runs-on: ubuntu-latest
    timeout-minutes: 1
    strategy:
      matrix:
        go: [stable]
      fail-fast: true
    needs: setup
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true
      - name: run go mod tidy
        run: go mod tidy && git diff --exit-code
      - name: run go mod verify
        run: go mod verify
      - name: run formatting
        run: go run golang.org/x/tools/cmd/goimports@latest -w . && git diff --exit-code

  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 1
    strategy:
      matrix:
        go: [stable]
      fail-fast: true
    needs: setup
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true
      - name: run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 1
    strategy:
      matrix:
        go: [stable]
      fail-fast: true
    needs: setup
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true
      - name: run tests
        run: go test -shuffle=on -v -count=1 -race -failfast -timeout=30s -covermode=atomic -coverprofile=coverage.out ./...
      - name: Coverage
        uses: codecov/codecov-action@v3

  benchmark:
    name: benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 2
    strategy:
      matrix:
        go: [stable]
      fail-fast: true
    needs: setup
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true
      - name: run benchmarks
        run: go test -run=- -benchmem -bench . github.com/wafer-bw/memcache/...

  gorelease:
    permissions:
      pull-requests: write
    name: gorelease
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        go: [stable]
      fail-fast: true
    needs: setup
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: run git fetch
        run: git fetch --force --tags
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true
      - name: run go mod download & tidy
        run: go mod download && go mod tidy
      - name: run gorelease
        run: |
          revision=$(go run golang.org/x/exp/cmd/gorelease@latest)
          echo "revision: $revision"
          echo "::set-output name=revision::$revision"
      - name: Comment gorelease outpout
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: release
          message: |
            ${{ steps.gorelease.outputs.revision }}
